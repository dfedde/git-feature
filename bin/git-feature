#!/bin/bash
dev_branch='development'
remote='origin'

sub_start(){
  if [ -z $1 ]; then 
    echo "Error: you must give a feature name" >&2
    exit 1
  fi
  git checkout -b feature-$1 $dev_branch
}

sub_finish(){
  echo $1
  if [ -z $1 ]; then
    branch=`git rev-parse --abbrev-ref HEAD`
    echo $branch
  else
    branch=$1
  fi
    git pull $remote $dev_branch
    if [ $? -ne 0 ]; then
     exit 1 
    fi
    git checkout $dev_branch
    if [ $? -ne 0 ]; then
     exit 1 
    fi
    git merge $branch --no-ff 
    if [ $? -ne 0 ]; then
     exit 1 
    fi
    git push $remote $dev_branch
    if [ $? -ne 0 ]; then
     git checkout $branch
     exit 1 
    fi
    git branch -d $branch
    if [ $? -ne 0 ]; then
     exit 1 
    fi
}

sub_help(){
  echo "Usage: git feature <subcomand>"
  echo ""
  echo "-h --help        display this help message"
  echo ""
  echo "Commands:"
  echo ""
  echo "start <name>     starts a new feature with <name>"
  echo ""
  echo "finish [name]    finish merger and push a feature."
  echo "                 If name not given will use current branch"
  echo ""
}
subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${subcommand} $@
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo " Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac
